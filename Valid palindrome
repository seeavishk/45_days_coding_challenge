class Solution {  
public:  
    // Function to check if a string is a valid palindrome by allowing at most one deletion  
    bool validPalindrome(string s) {  
        if(s.length() == 0) {  
            return true; // An empty string is considered a valid palindrome  
        }  
        
        int l = 0, r = s.length() - 1; // Initialize left and right pointers  

        while(l < r) {  
            // Move the pointers inward as long as the characters match  
            if(s[l] == s[r]) {  
                l++;  
                r--;  
            } else {  
                // If characters don't match, check if skipping one character on either side makes it a palindrome  
                return isPalindrome(s, l + 1, r) || isPalindrome(s, l, r - 1);  
            }  
        }  
        
        return true; // Return true if the string is a valid palindrome  
    }  
    
    // Function to check if a substring is a palindrome within the given bounds  
    bool isPalindrome(string s, int start, int end) {  
        while(start < end) {  
            if(s[start] != s[end]) {  
                return false;  
            }  
            start++;  
            end--;  
        }  
        
        return true;  
    }  
};

class Solution {  
   private:  
    bool dfs(int node, vector<int> adj[], int vis[], int path[]) {  
        vis[node] = 1;   // mark the node as visited  
        path[node] = 1;  // mark the node as part of the current path  
        
        // explore all adjacent nodes  
        for (auto it : adj[node]) {  
            if (!vis[it]) {  
                // if the adjacent node hasn't been visited, recurse on it  
                if (dfs(it, adj, vis, path) == true)   
                    return true;  
            }  
            // if the adjacent node is visited and part of the current path  
            else if (path[it]) {  
                return true; // cycle detected  
            }  
        }  
        
        path[node] = 0; // backtrack  
        return false;   // no cycle found from this node  
    }  
    
  public:  
    // Function to detect cycle in a directed graph.  
    bool isCyclic(int V, vector<int> adj[]) {  
        int vis[V] = {0};  // to keep track of visited nodes  
        int path[V] = {0}; // to keep track of nodes in the current path  
        
        // iterate over each node  
        for(int i = 0; i < V; i++) {  
            // start the DFS from the current node if it hasn't been visited  
            if(!vis[i]) {  
                if(dfs(i, adj, vis, path) == true)   
                    return true; // a cycle is found  
            }  
        }  
        return false; // no cycle found  
    }  
};

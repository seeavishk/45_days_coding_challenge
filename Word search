class Solution {
    bool search(vector<vector<char>>& board, int i, int j, string& word, int idx, vector<vector<bool>>& visited) {
        if (idx == word.length()) return true;  // Check if the end of the word is reached
        if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || visited[i][j] || board[i][j] != word[idx])
            return false;

        visited[i][j] = true;

        bool found = search(board, i - 1, j, word, idx + 1, visited) ||
                     search(board, i + 1, j, word, idx + 1, visited) ||
                     search(board, i, j - 1, word, idx + 1, visited) ||
                     search(board, i, j + 1, word, idx + 1, visited);

        visited[i][j] = false;  // backtrack
        return found;
    }

public:
    bool exist(vector<vector<char>>& board, string word) {
        int r = board.size(), c = board[0].size();
        vector<vector<bool>> visited(r, vector<bool>(c, false));
        
        for (int i = 0; i < r; i++) {
            for (int j = 0; j < c; j++) {
                if (board[i][j] == word[0] && search(board, i, j, word, 0, visited)) return true;
            }
        }
        return false;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
private:
    // Helper function to reverse a linked list
    ListNode* reverseList(ListNode* head, int count) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (count > 0 && curr != nullptr) {
            ListNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            count--;
        }
        head->next = curr; // Connect the end of the reversed list to the remaining part of the list
        return prev;       // Return the new head of the reversed part
    }
public:
    // Function to reverse the list from position left to right
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (left == right) return head; // No need to reverse if left == right
        
        ListNode dummy(0);
        dummy.next = head;
        ListNode* prev = &dummy;
        
        // Move `prev` to the node just before the `left`-th node
        for (int i = 1; i < left; ++i) {
            prev = prev->next;
        }
        
        // `start` is the `left`-th node, which will become the end of the reversed sublist
        ListNode* start = prev->next;
        // `then` is the node that we are going to reverse, starting from `start->next`
        ListNode* then = start->next;
        
        // Reverse the sublist
        for (int i = 0; i < right - left; ++i) {
            start->next = then->next;
            then->next = prev->next;
            prev->next = then;
            then = start->next;
        }
        
        return dummy.next;
    }
};

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to find the smallest window in the string s consisting
    //of all the characters of string p.
    string smallestWindow (string s, string p){
        // Maps to store frequency of characters in p and in the current window of s.
        unordered_map<char,int> freqP, freqS;
        int m = s.length();
        int n = p.length();
        
        // Populate freqP with the frequency of each character in p.
        for(char c : p) {
            freqP[c]++;
        }
        
        int i = 0, j = 0; // Pointers to traverse the string s.
        int minLen = INT_MAX; // To store the length of the smallest window.
        int startidx = -1; // To store the starting index of the smallest window.
        int count = 0; // To count how many characters of p are matched in the current window.
        
        // Traverse the string s with the end pointer j.
        for(int j = 0; j < m; j++) {
            // If the current character in s is part of p, update the frequency in freqS.
            if(freqP.find(s[j]) != freqP.end()) {
                freqS[s[j]]++;
                
                // If the character's frequency in the current window is less than or equal to 
                // its frequency in p, increment the count.
                if(freqS[s[j]] <= freqP[s[j]]) {
                    count++;
                }
                
                // If all characters of p are matched in the current window.
                if(count == n) {
                    // Try to minimize the window by moving the start pointer i.
                    while(freqP.find(s[i]) == freqP.end() || freqS[s[i]] > freqP[s[i]]) {
                        if(freqS.find(s[i]) != freqS.end()) {
                            freqS[s[i]]--;
                        }
                        i++;
                    }
                    
                    // Update the length and starting index of the smallest window.
                    int winlen = j - i + 1;
                    if(winlen < minLen) {
                        minLen = winlen;
                        startidx = i;
                    }
                }
            }
        }
        
        // If no valid window is found, return "-1".
        if(startidx == -1) {
            return "-1";
        }
        
        // Return the smallest window.
        return s.substr(startidx, minLen);
    }
};
    

//{ Driver Code Starts.
int main()
 {
    int t;
    cin>>t;
    while(t--)
    {
        string s;
        cin>>s;
        string pat;
        cin>>pat;
        Solution obj;
        cout<<obj.smallestWindow(s, pat)<<endl;
        
    }
	return 0;
}
// } Driver Code Ends

//{ Driver Code Starts
// C++ program to evaluate value of a postfix expression

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
public:
    // Function to evaluate a postfix expression
    int evaluatePostfix(string S)
    {
        stack<int> st;

        for (char c : S)
        {
            if (isdigit(c)) // If the character is a digit
            {
                st.push(c - '0'); // Convert char to int and push to stack
            }
            else if (c == '+' || c == '-' || c == '*' || c == '/') // If the character is an operator
            {
                // Pop the top two elements from the stack
                int val2 = st.top(); st.pop();
                int val1 = st.top(); st.pop();

                // Perform the operation based on the operator
                switch (c)
                {
                case '+': st.push(val1 + val2); break;
                case '-': st.push(val1 - val2); break;
                case '*': st.push(val1 * val2); break;
                case '/': st.push(val1 / val2); break;
                }
            }
        }

        // The result will be the only element left in the stack
        return st.top();
    }
};



//{ Driver Code Starts.

// Driver program to test above functions
int main()
{
    int t;
    cin>>t;
    cin.ignore(INT_MAX, '\n');
    while(t--)
    {
        string S;
        cin>>S;
        Solution obj;
    
    cout<<obj.evaluatePostfix(S)<<endl;
    }
    return 0;
}

// } Driver Code Ends

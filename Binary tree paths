/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        // Result vector to store all paths
        vector<string> paths;
        // If the root is nullptr, return an empty vector
        if (root == nullptr) return paths;
        // Helper function to build paths
        constructPaths(root, "", paths);
        return paths;
    }

private:
    // Helper function to construct paths
    void constructPaths(TreeNode* node, string path, vector<string>& paths) {
        if (node != nullptr) {
            // Append current node value to the path
            path += to_string(node->val);
            // If the node is a leaf, add the path to the result vector
            if (node->left == nullptr && node->right == nullptr) {
                paths.push_back(path);
            } else {
                // Otherwise, continue to explore the children
                path += "->"; // Add the arrow for the next node
                constructPaths(node->left, path, paths); // Recur for the left child
                constructPaths(node->right, path, paths); // Recur for the right child
            }
        }
    }
};
